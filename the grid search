#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);

int parse_int(char*);

/*
 * Complete the 'gridSearch' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts following parameters:
 * 1. STRING_ARRAY G
 * 2. STRING_ARRAY P
 */
char* gridSearch(int G_count, char** G, int P_count, char** P) {
    // R is G_count, r is P_count
    int R = G_count;
    int r = P_count;
    
    // C is the length of a row in G, c is the length of a row in P.
    // Assuming G and P are non-empty and have consistent row lengths.
    int C = (R > 0) ? strlen(G[0]) : 0;
    int c = (r > 0) ? strlen(P[0]) : 0;
    
    // Static strings for return values (required by the problem's function signature)
    static char yes_str[] = "YES";
    static char no_str[] = "NO";
    
    // Check if the pattern is too large to fit in the grid
    if (r > R || c > C) {
        return no_str;
    }
    
    // Iterate through all possible top-left starting positions (i, j) in G
    for (int i = 0; i <= R - r; i++) { // Starting row index in G
        for (int j = 0; j <= C - c; j++) { // Starting column index in G
            
            // Optimization: Check if the first row of the pattern P[0] matches
            // the substring of G[i] starting at column j.
            if (strncmp(G[i] + j, P[0], c) == 0) {
                // Potential match found for the first row. Check the remaining rows.
                bool match = true;
                
                // Check pattern rows from the second row (index 1) up to r-1
                for (int p_row = 1; p_row < r; p_row++) {
                    // Compare the p_row-th pattern row P[p_row]
                    // with the substring of G[i + p_row] starting at column j
                    if (strncmp(G[i + p_row] + j, P[p_row], c) != 0) {
                        // Mismatch found, break the inner check
                        match = false;
                        break;
                    }
                }
                
                if (match) {
                    // All rows of the pattern matched perfectly!
                    return yes_str;
                }
            }
        }
    }
    
    // If the function completes the loops, the pattern was not found.
    return no_str;
}

// --- BOILERPLATE CODE (Provided in the problem description) ---

int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    int t = parse_int(ltrim(rtrim(readline())));

    for (int t_itr = 0; t_itr < t; t_itr++) {
        char** first_multiple_input = split_string(rtrim(readline()));

        int R = parse_int(*(first_multiple_input + 0));

        int C = parse_int(*(first_multiple_input + 1));

        char** G = malloc(R * sizeof(char*));

        for (int i = 0; i < R; i++) {
            char* G_item = readline();

            *(G + i) = G_item;
        }

        char** second_multiple_input = split_string(rtrim(readline()));

        int r = parse_int(*(second_multiple_input + 0));

        int c = parse_int(*(second_multiple_input + 1));

        char** P = malloc(r * sizeof(char*));

        for (int i = 0; i < r; i++) {
            char* P_item = readline();

            *(P + i) = P_item;
        }

        char* result = gridSearch(R, G, r, P);

        fprintf(fptr, "%s\n", result);
    }

    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;

        data = realloc(data, alloc_length);

        if (!data) {
            data = '\0';

            break;
        }
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';

        data = realloc(data, data_length);

        if (!data) {
            data = '\0';
        }
    } else {
        data = realloc(data, data_length + 1);

        if (!data) {
            data = '\0';
        } else {
            data[data_length] = '\0';
        }
    }

    return data;
}

char* ltrim(char* str) {
    if (!str) {
        return '\0';
    }

    if (!*str) {
        return str;
    }

    while (*str != '\0' && isspace(*str)) {
        str++;
    }

    return str;
}

char* rtrim(char* str) {
    if (!str) {
        return '\0';
    }

    if (!*str) {
        return str;
    }

    char* end = str + strlen(str) - 1;

    while (end >= str && isspace(*end)) {
        end--;
    }

    *(end + 1) = '\0';

    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");

    int spaces = 0;

    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);

        if (!splits) {
            return splits;
        }

        splits[spaces - 1] = token;

        token = strtok(NULL, " ");
    }

    return splits;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);

    if (endptr == str || *endptr != '\0') {
        exit(EXIT_FAILURE);
    }

    return value;
}
