 int bribes = 0;
    
    // Iterate from the end of the queue
    for (int i = q_count - 1; i >= 0; i--) {
        // Check for "Too chaotic" condition
        if (q[i] - (i + 1) > 2) {
            printf("Too chaotic\n");
            return;
        }
        
        // Count bribes by checking people who were originally in front
        // but are now behind this person.
        for (int j = fmax(0, q[i] - 2); j < i; j++) {
            if (q[j] > q[i]) {
                bribes++;
            }
        }
    }
    
    printf("%d\n", bribes);
}

int main()
{
    int t = parse_int(ltrim(rtrim(readline())));

    for (int t_itr = 0; t_itr < t; t_itr++) {
        int n = parse_int(ltrim(rtrim(readline())));

        char** q_temp = split_string(rtrim(readline()));

        int* q = malloc(n * sizeof(int));

        for (int i = 0; i < n; i++) {
            int q_item = parse_int(*(q_temp + i));
            *(q + i) = q_item;
        }

        minimumBribes(n, q);
        free(q);
    }

    return 0;
}
